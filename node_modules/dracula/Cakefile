# CoffeeScrip cake file used to control the test
#
# Tasks:
#
# - install

fs = require 'fs'
path = require 'path'
{spawn, exec} = require 'child_process'


# Usefull functions
#
bold = "\033[0;ln"
red   = "\033[0;31m"
green = "\033[0;32m"
reset = "\033[0m"

say = (message,color, explanation) ->
  console.log "#{color}#{message}#{reset} #{(explanation or '')}"

trace = (error,stdout,stderr) ->
  console.log stdout if stdout
  console.log stderr if stderr

  if error
    process.stdout.write "#{red}#{error.stack}#{reset}\n"
    process.exit -1

build = (from , to) ->
  say "Compile #{from} ...", green
  command = spawn "coffee", ["--require", "coffeescript-notify", "--compile", "--bare", "--lint", "--output", to, from]
  command.stdout.on 'data', (data) ->
    process.stdout.write "#{green}#{data}#{reset}"
  command.stderr.on 'data', (data) ->
    process.stdout.write "#{red}#{data}#{reset}"
  command.on "error", (error) ->
    process.stdout.write "#{red}#{error.stack}#{reset}\n"
    process.exit -1

watch = (from, to) ->
  say "Watching #{from} ...", green
  command = spawn "coffee", ["--require", "coffeescript-notify", "--compile", "--watch", "--bare", "--lint", "--output", to, from]
  command.stdout.on 'data', (data) ->
    process.stdout.write "#{green}#{data}#{reset}"
  command.stderr.on 'data', (data) ->
    process.stdout.write "#{red}#{data}#{reset}"
  command.on "error", (error) ->
    process.stdout.write "#{red}#{error.stack}#{reset}\n"
    process.exit -1


task 'compile', 'Coffee-Script compile project', ->
  build 'src/', './'
  say "Done.", green

task 'watch', 'Coffee-Script watch for changes in files', ->
  watch 'src/', './'
  
task 'install', 'Install Node.js package dependencies (uses npm)', ->
  log "Installing dependencies into node_modules ...", green
  exec 'npm install', trace

